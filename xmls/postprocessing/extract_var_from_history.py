"""
This script extracts a single variable or multiple variables from history tar files 
generated by a model FRE run. The extracted variables are stored in a specified output 
directory for further analysis.

### Functionality:
- Efficiently extracts variables that are contained within the same model output file.
- Designed for model outputs with a consistent file-naming pattern, such as:
  `YYYYMMDD.ocean_month.nc`, where `ocean_month` is specified in the configuration file.
- Supports extracting multiple variables at once.

### Requirements:
- The script expects a configuration file (`example_extract_var.json`) as input.
- The `example_extract_var.json` file must specify the directories, archive naming conventions, 
  variable names, and the range of years to process.

### Example Usage:
```bash
python extract_nc.py example_extract_var.json

### Example example_extract_var.json Configuration:
{
    "output_directory": "/collab1/data_untrusted/xxx/output_dir",
    "archive_directory": "/archive/.../history",
    "archive_subexp_name": "ocean_month",
    "variable_names": ["tob", "tos"],
    "start_year": 1993,
    "end_year": 2024
}

#### Explanation of example_extract_var.json Parameters:
- output_directory (str): Directory where the extracted NetCDF files will be saved.
- archive_directory (str): Directory containing the history tar files.
- archive_subexp_name (str): Prefix used in the model output files (e.g., "ocean_month").
- variable_names (list of str): List of variable names to extract.
- start_year (int): Beginning year for extraction.
- end_year (int): End year for extraction.

### Notes:
- The script is optimized for extracting variables from files that follow a structured naming convention.
- Ensure that the specified directories and files exist before running the script.
- The process may take time depending on the size of the data and number of variables.

"""

import os
import glob
import json
import sys
import logging
import subprocess
# import tarfile
from pathlib import Path

def setup_logging(log_file):
    """Set up logging to write messages to a log file."""
    logging.basicConfig(
        filename=log_file,
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
    )

def load_config(json_file):
    """Load directory configuration from a JSON file."""
    with open(json_file, 'r' ,encoding='utf-8') as file:
        return json.load(file)

def extract_nc_from_history(
    archive_dir:str,
    output_dir:str,
    subexp_name:str,
    var:str,
    start_year:int,
    end_year:int
):
    """
    1. extract only the subexp netcdf file (use tar -tf file.tar to check availability)
    2. extract single variable from the subexp nc
    3. concat all avialable years from start to end year

    Parameters
    ----------
    archive_dir : str
        the history archive path
    output_dir : str
        the output directory path
    subexp_name : str
        the output experiement name ex: ocean_month, ocean_daily ...etc
    var : str
        variable name
    start_year : int
        start of the extract and concat year
    end_year : int
        end of the extract and concat year
    """

    for yr in range(start_year, end_year+1):

        tar_path = Path(f"{archive_dir}/{yr:04d}0101.nc.tar")
        file_to_extract = f"./{yr:04d}0101.{subexp_name}.nc"

        # extract file from a tarball
        output_filename = os.path.join(output_dir,file_to_extract)
        if os.path.isfile(output_filename):
            logging.warning(
                'extract tar file %s exist',output_filename
            )
        else:
            logging.info(
                'extracting tar file %s ...',output_filename
            )
            # untar single file based on subexp_name
            subprocess.run(
                ["tar", "-xf", tar_path, "-C", Path(output_dir), file_to_extract], check=True
            )

            # insecure method
            # with tarfile.open(tar_path, "r") as tar:
            #     tar.extract(file_to_extract,path=output_dir)

        # extract single variable from a netCDF file using ncks
        output_var_filename = os.path.join(output_dir,f'{subexp_name}.{yr}.{var}.nc')
        if os.path.isfile(output_var_filename):
            logging.warning(
                'extract variable %s exist',output_var_filename
            )
        else:
            logging.info(
                'extracting variable %s ...',output_var_filename
            )
            subprocess.run(
                ["ncks", "-O", "-h", "-v", var, output_filename, output_var_filename], check=True
            )

    # concatenate files
    output_var_filename_wildcard = os.path.join(output_dir,f'{subexp_name}.????.{var}.nc')
    allfiles = glob.glob(output_var_filename_wildcard)
    output_var_concat_filename = os.path.join(
        output_dir,f'{subexp_name}.{start_year:04d}-{end_year:04d}.{var}.nc'
    )
    if len(allfiles) == 0:
        logging.error(
            'single variable files do not exit'
        )
    else:
        if os.path.isfile(output_var_concat_filename):
            logging.warning(
                'concatenate file %s exist',output_var_concat_filename
            )
        else:
            logging.info(
                'concatenate files for variable %s ...',var
            )
            command = ["ncrcat", "-O", "-h"] + allfiles + [output_var_concat_filename]
            subprocess.run(command, check=True)
            logging.info(
                'concatenated file at %s ...',output_var_concat_filename
            )

        # remove individual files
        for file in allfiles:
            os.remove(file)
        logging.info('remove individual files')

    return

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python extract_nc.py <config_file.json>")
        sys.exit(1)

    config_file = sys.argv[1]

    # Derive the log file name from the config file
    log_file = os.path.splitext(config_file)[0] + ".log"

    # remove log file if exist
    if os.path.isfile(log_file):
        os.remove(log_file)

    try:
        # Set up logging
        setup_logging(log_file)

        # Load config
        config = load_config(config_file)
        output_directory = config["output_directory"]
        archive_directory = config["archive_directory"]
        archive_subexp_name = config["archive_subexp_name"]
        variable_names = config["variable_names"]
        start_yr = config["start_year"]
        end_yr = config["end_year"]

        # run extract variable
        for variable in variable_names:
            extract_nc_from_history(
                archive_dir = archive_directory,
                output_dir = output_directory,
                subexp_name = archive_subexp_name,
                var = variable,
                start_year = start_yr,
                end_year = end_yr
            )

    except (FileNotFoundError, json.JSONDecodeError) as e:
        error_message = f"ERROR: Could not read config file '{config_file}': {e}"
        logging.error(error_message)
        print(error_message)
